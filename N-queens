
(define solve_aux
  (lambda (n f sol etapa aux)
    (cond ((equal? (length aux) f) (append '() aux))
          ((equal? (last sol) (+ 1 n)) aux)
          ((equal? #t (valido sol etapa))  (cond ((equal? (length sol ) n) (append aux (list sol)))
                                                 (else (solve_aux n f (cambio sol) etapa (solve_aux n f (append sol (list 1)) (+ 1 etapa) aux)))
                                            )) 
          (else (solve_aux n f (cambio sol) etapa aux))
          )))

(define backtrackingNReinas
  (lambda (n f)
    (solve_aux n f '(1) 1 '())))

;Ultimo elemento de la lista 
(define last
  (lambda (n)
    (cond ((null?(cdr n)) (car n))
          (else (last (cdr n))))))


;Devuelve una lista con +1 en el utimo elemento.
(define cambio
  (lambda (l)
    (cond ((null? (cdr l)) (list (+ (car l) 1)))
          (else (append (list (car l)) (cambio (cdr l))))
          )))


;Valida si un vector solución en n etapa es valido
(define valido_aux
  (lambda (list etapa n)
    (cond ((equal? n etapa) #t)
          ((equal? (kelements n list) (kelements etapa list)) #f )
          ((equal? (abs n etapa) (abs (kelements n list) (kelements etapa list) )) #f)
          (else (valido_aux list etapa (+ n 1)))
          )))

(define valido
  (lambda (list etapa)
    (valido_aux list etapa 1 )))


;Definir criterios de aceptación
(define abs
  (lambda (x y)
    (cond ((> x y) (- x y))
          (else (- y x)))))

;Obtener un elemento en pos k
(define kelements
  (lambda (n m)
    (cond ((equal? #f (> n (length m))) (kelements_aux n m))
          (else #f))))

(define kelements_aux
    (lambda (m k)
      (cond ((eq? m 1) (car k))
            (else (kelements_aux(- m 1) (cdr k))))))
;--------------------------------------------------------------